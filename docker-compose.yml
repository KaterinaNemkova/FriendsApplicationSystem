services:
  authservice_api:
      env_file:
          - .env
      build:
          context: .
          dockerfile: ./src/AuthService/AuthService.Api/Dockerfile
      ports:
        - "7210:8080"
      container_name: authservice_container
      environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - DB_CONNECTION_STRING=${POSTGRES_DB_CONNECTION_STRING}
        - USER_GRPC_URL=${USER_GRPC_URL}
      depends_on:
        postgre_db:
          condition: service_started
          
  userservice_api:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./src/UserService/UserService.Api/Dockerfile   
    ports:
      - "5185:8080"
    container_name: userservice_container  
    environment:
      - ASPNETCORE_ENVIRONMENT=Development  
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_SECRET_API_KEY=${CLOUD_SECRET_API_KEY}
      - DB_CONNECTION_STRING=${MONGO_DB_CONNECTION_STRING}
    depends_on:
      mongo_db:
        condition: service_started
        
#  eventsservice_api:
#    env_file:
#      - .env
#    build:
#      context: .
#      dockerfile: ./src/EventsService/EventsService.Api/Dockerfile
#    ports:
#      - "5076:8080"
#    container_name: eventsservice_container
#    environment:
#      - ASPNETCORE_ENVIRONMENT=Development
#      - DB_CONNECTION_STRING=${MONGO_DB2_CONNECTION_STRING}
#    depends_on:
#      mongo_db:
#        condition: service_started
        
  notificationservice_api:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./src/NotificationService/NotificationService.Api/Dockerfile
    ports:
      - "5197:8080"
    container_name: notificationservice_container
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_CONNECTION_STRING=${MONGO_DB3_CONNECTION_STRING}
      - AUTH_GRPC_URL=${AUTH_GRPC_URL}
    depends_on:
      mongo_db:
        condition: service_started
      rabbitmq:
        condition: service_started
  
  authservice_grpc:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./src/AuthService/AuthService.GrpcServer/Dockerfile
    container_name: authservice_grpc
    ports:
      - "50051:50051" 
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_CONNECTION_STRING=${POSTGRES_DB_CONNECTION_STRING}
    depends_on:
      - postgre_db
      
  userservice_grpc:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./src/UserService/UserService.GrpcServer/Dockerfile
    container_name: userservice_grpc
    ports:
      - "50052:50052"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_CONNECTION_STRING=${MONGO_DB_CONNECTION_STRING}
    depends_on:
      - mongo_db
        
  mongo_db:
    image: mongo:latest
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/?authSource=admin
    depends_on:
      - mongo_db
    
  postgre_db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    container_name: postgresql_db_container

  pgadmin:
    image: elestio/pgadmin:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    container_name: pg_admin_container
    ports:
      - "5050:80"
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    depends_on:
      - postgre_db
    
  rabbitmq:
    image: rabbitmq:3-management
    container_name: 
      rabbitmq
    env_file:
      - .env
    restart: always
    ports:
        - "5672:5672"    
        - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq


volumes:
  mongo_data:
  db_data:
  pgadmin-data:
  rabbitmq_data:
  rabbitmq_logs:

      
    
      
